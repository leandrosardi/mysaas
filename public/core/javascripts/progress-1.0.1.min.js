/*
 * ## Progress.JS
 * Progress.js
 * This library follows the best practices enumarated here:
 * https://www.w3.org/community/webed/wiki/JavaScript_best_practices
 * 
 * Read documentation here:
 * https://github.com/leandrosardi/progressjs
 * 
 */


progressJs = {

	// recursive AJAX calls
	start: function(h, n=0) {
		$.ajax({
			url: h['url'],
			type: h['type'],
			data: h['data'][n],
			success: function(data) {
				// call the success function
				if ( commonsJs.isDefined(h['success']) == true ) { 
					h['success'](n, data);
				}
				
				// increase the counter
				n += 1;

				// reset AJAX pos
				if ( n == h['data'].length ) {
					// call the alldone function
					if ( commonsJs.isDefined(h['alldone']) == true ) { 
						h['alldone']();
					}
				} else {
					// call the next job
					progressJs.start(h, n)
				}
			},
			error: function(data) {
				// call the success function
				if ( commonsJs.isDefined(h['error']) == true ) { 
					h['error'](n, data);
				}
				
				// increase the counter
				n += 1;

				// reset AJAX pos
				if ( n == h['data'].length ) {
					// call the alldone function
					if ( commonsJs.isDefined(h['alldone']) == true ) { 
						h['alldone']();
					}
				} else {
					// decide if continue on error
					continue_on_error = false;
					if ( commonsJs.isDefined(h['continue_on_error']) == true ) { 
						continue_on_error = h['continue_on_error'];
					}

					// call the next job
					if ( continue_on_error == true ) {
						progressJs.start(h, n)
					} else {
						// call the alldone function
						if ( commonsJs.isDefined(h['alldone']) == true ) { 
							h['alldone']();
						}
					}
				} // if ( n == h['data'].length )
			},
		}); // $.ajax({
	}, // start
};