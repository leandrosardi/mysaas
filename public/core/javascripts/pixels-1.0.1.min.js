var pixelsJs = {

    version: function() {
        return '1.0.1';
    },

    // Return a globally-unique-identifier.
    // Reference: https://www.w3resource.com/javascript-exercises/javascript-math-exercise-23.php
    // Other choices: https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid
    guid: function() {
        var dt = new Date().getTime();
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = (dt + Math.random()*16)%16 | 0;
            dt = Math.floor(dt/16);
            return (c=='x' ? r :(r&0x3|0x8)).toString(16);
        });
        return uuid;
    },

    // Return the value of a GET parameter of the current URL.
    // Return `null` if the parameter does not exist.
    // Reference: https://stackoverflow.com/questions/979975/get-the-values-from-the-get-parameters-javascript
    getParam: function(name) {
//console.log('getParam.name:'+name);
        var url_string = window.location.href
//console.log('getParam.url_string:'+url_string);
        var url = new URL(url_string);
//console.log('getParam.url:'+url);
        var c = url.searchParams.get(name);
//console.log('getParam.c:'+c);
        return c;
    },

    // Set a cookie in the browser profile.
    // Reference: https://stackoverflow.com/questions/14573223/set-cookie-and-get-cookie-with-javascript
    setCookie: function(name, value, days) {
        var expires = "";
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days*24*60*60*1000));
            expires = "; expires=" + date.toUTCString();
        }
        document.cookie = name + "=" + (value || "")  + expires + "; path=/";            
    },

    // Get the value of a cookie from the browser profile.
    // Return `null` if the cookie does not exist.
    getCookie: function(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for(var i=0;i < ca.length;i++) {
            var c = ca[i];
            while (c.charAt(0)==' ') c = c.substring(1,c.length);
            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
        }
        return null;
    },

    // If there is a parameter `name` in the GET parameters of the URL,
    // update the cookies with this new value, and return such a value.
    //
    // Else, if there is a cookie `name`, return its value.
    //
    getPersistanceParam: function(name) {
//console.log('getPersistanceParam.name: ' + name);
        var val = pixelsJs.getParam(name);
//console.log('getPersistanceParam.val: ' + val);
        if ( val != null ) {
            pixelsJs.setCookie(name, val, 90);
        } else {
            val = pixelsJs.getCookie(name);
        }
//console.log('getPersistanceParam.val: ' + val);
        return val;
    },            

    // If there is a parameter `cs.ats.id_result` in the GET parameters of the URL,
    // update the cookies with this new value, and return such a value.
    //
    // Else, if there is a cookie `cs.ats.id_result`, return its value.
    //
    getIdResult: function() {
        return pixelsJs.getPersistanceParam('cs.ats.id_result');
    },

    // If there is a parameter `cs.ats.id_affiliate` in the GET parameters of the URL,
    // update the cookies with this new value, and return such a value.
    //
    // Else, if there is a cookie `cs.ats.id_affiliate`, return its value.
    //
    getIdAffiliate: function() {
        return pixelsJs.getPersistanceParam('cs.ats.id_affiliate');
    },

    // If there is a cookie `cs.ats.visitor_id`, return such a value.
    //
    // Else, create a new cookie `cs.ats.visitor_id`, and return its value.
    //
    getVisitorId: function() {
        var name = 'cs.ats.visitor_id';
        var val = pixelsJs.getCookie(name);
        if ( val == null ) {
            val = pixelsJs.guid();
            pixelsJs.setCookie(name, val, 90);
        }
        return val;
    },

    // return the URL to the listener
    listener_url: function(h) {
        let url = h.server + '/affiliatestrackingservice/listener'
        url += '?id_tracking_pixel=' + h.id_tracking_pixel
        url += '&visitor_id=' + h.visitor_id                    
        if ( h.id_result != null && typeof h.id_result != 'undefined'  ) { url += '&id_result=' + h.id_result ; }
        if ( h.id_affiliate != null && typeof h.id_affiliate != 'undefined'  ) { url += '&id_affiliate=' + h.id_affiliate ; }
        if ( h.tag != null && typeof h.tag != 'undefined'  ) { url += '&tag=' + h.tag ; }
        if ( h.signup_email != null && typeof h.signup_email != 'undefined'  ) { url += '&signup_email=' + h.signup_email ; }
        if ( h.revenue != null && typeof h.revenue != 'undefined'  ) { url += '&revenue=' + h.revenue ; }
        return url;
    },

    // draw the pixel at the end of the <body> tag.
    draw: function(h) {
        // draw the pixel - build the URL
        let url = pixelsJs.listener_url(h);
        // draw the pixel - create the img element
        let img = document.createElement('img');
        img.src = url;
        img.width = '1px';
        img.height = '1px';
        img.style.width = '1px';
        img.style.height = '1px';
        // draw the pixel - append the img element
        document.body.appendChild(img);
        // call the callback `done` function
        if (typeof h.done === 'function') {
            h.done();
        } 
    },

    // Perform a monkey-patch on the onload event, and draw the pixel.
    init: function(h) {
        let old_onload = window.onload;
        window.onload = function () {
            // draw the pixel
            pixelsJs.draw(h);

            // call the original onload function
            if (typeof old_onload == 'function') {
                old_onload();
            }
        }
    },

    // Setup a function to call just after draw the pixel.
    done: null,
}