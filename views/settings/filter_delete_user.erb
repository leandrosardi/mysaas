<%
	random_id = guid()

	if (params.has_key?('uid') == false)
		return_message[:status] = 'uid (user id) expected.'
		return_message[:value] = ""
		DB.disconnect
		GC.start
		return return_message.to_json
	end

	user = BlackStack::User.where(:id=>params['uid']).first
	if ( user == nil )
		return_message[:status] = 'User ID not found in the central database. Call support for assistance.'
		return_message[:value] = ""
		DB.disconnect
		GC.start
		return return_message.to_json
	end

	# envio la informacion a la division central
	url = "#{BlackStack::Pampa::api_url}/api1.2/central/delete_user.json"
	res = BlackStack::Netting::call_post(url, {'api_key' => BlackStack::Pampa::api_key, 'uid' => params['uid'], 'random_id' => random_id})
	parsed = JSON.parse(res.body)
	if parsed["status"]!="success"
		# libero recursos
		DB.disconnect
		GC.start
		redirect_adapted_to_nginx getDivisionURL + '/settings/users?errdesc=' + CGI.escape(parsed['status'].to_s)
	end

	# actualizo el registro
	user.delete_time = now()
	user.email += '-' + random_id.to_guid
	user.division_email += '-' + random_id.to_guid
	user.save

	# delete links to pipelines
	PipelineUser.where(:id_user=>user.id).each { |o|
		o.delete
		DB.disconnect
		GC.start
	}

	# 
    DB.disconnect
    GC.start

 	# redireccionar al dashboard
 	redirect_adapted_to_nginx getDivisionURL + '/settings/users?msgdesc=Account%20Deleted.'
%>
