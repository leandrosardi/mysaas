<%
    return_message = {}

    id_postmark = params[:id_postmark]

    puts params[:id_postmark].inspect

    if id_postmark.nil? || id_postmark.to_s.size == 0
        DB.disconnect
		GC.start
		redirect "/settings/clientinformation?err=ID%20Postmark%20parameter%20expected."
    end

    begin
		client_postmark = Postmark::AccountApiClient.new(POSTMARK_API_TOKEN, secure: true)
	rescue => exception
		DB.disconnect
		GC.start
		redirect "/settings/clientinformation?err=#{URI.encode(exception.message)}"
    end

    begin
        sender = client_postmark.get_sender(id_postmark)
        puts sender.inspect
        message = ''

        if sender[:spf_verified] == false
            message = "SPF"
        end

        if sender[:dkim_verified] == false
            if message.to_s.size > 0 
                message += " and "
            end
            message = "DKIM"
        end

        puts sender.inspect

        if message.to_s.size > 0 
            message += " Not Verified"
            return_message[:status] = 'verification'
            return_message[:value] = message
            return_message[:spf_verified] = sender[:spf_verified]
            return_message[:spf_host] = sender[:spf_host]
            return_message[:spf_text_value] = sender[:spf_text_value]

            return_message[:dkim_verified] = sender[:dkim_verified]
            return_message[:dkim_pending_host] = sender[:dkim_pending_host]
            return_message[:dkim_pending_text_value] = sender[:dkim_pending_text_value]

            DB.disconnect
            GC.start
            return return_message.to_json
        else
            return_message[:status] = 'success'
            return_message[:value] = ''

            DB.disconnect
            GC.start
            return return_message.to_json
        end

    rescue => exception
        return_message[:status] = 'error'
        return_message[:value] = exception.message

        DB.disconnect
        GC.start
        return return_message.to_json
    end
%>