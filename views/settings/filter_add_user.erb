<!-- HERE IS HOW TO CATCH POST/GET PARAMETERS -->
<%
  cid = params[:cid]
  username = params[:username]
  email = params[:email]
  linkedin_url = params[:linkedin_url]
  gtc = params[:gtc]
  parsed = nil

  session['member.users.username'] = username
  session['member.users.email'] = email

  nTries = 0
  bSuccess = false
  sError = ""

  linkedin_url_pattern = /((https?:\/\/)?(www\.)?linkedin\.com\/in\/)(([-A-Za-z0-9](\/?))+$)/

  if username.to_s.size == 0
	# libero recursos
	DB.disconnect
	GC.start
	msg = 'Username is Required.'
    redirect_adapted_to_nginx getDivisionURL + "/settings/users?errdesc=#{CGI.escape(msg)}"  	
  end
  
  if email.to_s.size == 0
	# libero recursos
	DB.disconnect
	GC.start
	msg = 'Email is Required.'
    redirect_adapted_to_nginx getDivisionURL + "/settings/users?errdesc=#{CGI.escape(msg)}"  	
  end

  if !email.email?
	# libero recursos
	DB.disconnect
	GC.start
	msg = 'Wrong email format. <b>Note:</b> You must write one, and only one, valid email address.'
    redirect_adapted_to_nginx getDivisionURL + "/settings/users?errdesc=#{CGI.escape(msg)}"  	
  end

=begin
  # IMPORTANTE: Algunos access point iteran los usuarios de un cliente, y envian una notificacion a cada uno.
  # => Si la cantidad de usuarios es demasiado grande, el access point demorara demasiado generando errores
  # => de http read timeout.
  n = BlackStack::User.where(:id_client=>cid).count
  if (n>=15)
	# libero recursos
	DB.disconnect
	GC.start
	msg = 'No more than 15 users are allowed. <b><a href="mailto:'+HELPDESK_EMAIL+'">Contact support</a></b> if you need to add more users to your account.'
    redirect_adapted_to_nginx "/settings/users?err=#{CGI.escape(msg)}"  	
  end
=end
  while (nTries < 5 && bSuccess == false)
    begin
      nTries = nTries + 1
      url = "#{CS_HOME_WEBSITE}/api1.2/central/add_user.json"
      res = BlackStack::Netting::call_post(url,
        {'api_key' => BlackStack::Pampa::api_key,
        'cid' => cid,
        'username' => username,
        'email' => email,
		'ws_url' => PROCESS.division.home.ws_url,
		'ws_port' => PROCESS.division.home.ws_port,}
      )
      parsed = JSON.parse(res.body)
      bSuccess = true
    rescue Errno::ECONNREFUSED => e
      sError = "Errno::ECONNREFUSED:" + e.to_html
    rescue => e2
      sError = "Exception:" + e2.to_html
    end
  end # while

  if (bSuccess==false)
	# libero recursos
	DB.disconnect
	GC.start
    redirect_adapted_to_nginx getDivisionURL + "/settings/users?errdesc=Failed+to+signup"
  end

  if (parsed['status'] != "success")
	# libero recursos
	DB.disconnect
	GC.start
    redirect_adapted_to_nginx getDivisionURL + "/settings/users?errdesc=Signup+Error+#{CGI.escape(': ' + parsed['status'])}"  	
  end

  # libero recursos
  DB.disconnect
  GC.start

  # limpio las variables de sesion, para que el fomulario quede en blanco
  session['member.users.username'] = nil
  session['member.users.email'] = nil


  # redireccionar al dashboard
  redirect_adapted_to_nginx getDivisionURL + '/settings/users?msgdesc=Account%20Created.'
%>
<!-- ---------------------------------------- -->
