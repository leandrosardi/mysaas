<!-- HERE IS HOW TO CATCH POST/GET PARAMETERS -->
<% 
nid = params[:nid]

# validar que los parametros no esten vacios
if (nid.to_s.size==0 || nid.to_s.size==0)
	redirect_adapted_to_nginx '/error?err='+ERR_CONFIRM_NOTIFICATION_ID_EXPECTED.to_s
end

# TODO: Validar que nid tenga el formato de un GUID

# 
notification = Notification.where(:id=>nid, :type=>Notification::NOTIFICATION_CONFIRM).first

# verifico si la notificacion existe
if (notification == nil)
	redirect_adapted_to_nginx '/error?err='+ERR_CONFIRM_NOTIFICATION_NOT_FOUND.to_s
end

# verifico que la notificacion no es anterior a NotificationConfirmation::NOTIFICATION_CONFIRMATION_LINK_TIMEOUT
if (notification.old()>NotificationConfirm::NOTIFICATION_CONFIRM_LINK_TIMEOUT)
	redirect_adapted_to_nginx '/error?err='+ERR_CONFIRM_NOTIFICATION_EXPIRED.to_s
end

# 
user = BlackStack::User.where(:id=>notification.id_user).first

# verifico que el usuario exista
if (user == nil)
	redirect_adapted_to_nginx '/error?err='+ERR_CONFIRM_USER_NOT_FOUND.to_s
end

# activar la cuenta
DB.execute("UPDATE [user] SET verified=1 WHERE [id]='#{user.id}'")

# envio un request a las divisiones para que confirmen el email de este usuario
BlackStack::UserDivision.where(:id_user=>user.id).all { |ud|
	division = BlackStack::Division.where(:id=>ud.id_division).first

	url = "#{BlackStack::Pampa::api_protocol}://#{division.app_url}:#{division.app_port}/api1.2/division/confirm.json"
	res = BlackStack::Netting::call_post(
		url, 
		{'api_key' => BlackStack::Pampa::api_key, 
		'uid' => user.id}
		)
	#TODO: Validar que el estado de la respuesta sea igual a 'success' 
	parsed = JSON.parse(res.body)
}

# redirecciono a la pagina de login
redirect_adapted_to_nginx "/login?msg=Account%20Verified."
%>
<!-- ---------------------------------------- -->
