<% 
nid = params[:nid]
new_password_1 = params[:new_password_1]
new_password_2 = params[:new_password_2]

# validar que los parametros no esten vacios
if nid.to_s.size==0
	redirect "/recover?err=#{CGI::escape("Notification ID is Required.")}"
end

# TODO: Validar que nid tenga el formato de un GUID

# load objects
notification = BlackStack::Core::NotificationConfirm.where(:id=>nid).first

# verifico que la notificacion no es anterior a NotificationReset::LINK_TIMEOUT
if notification.oldness > BlackStack::Core::NotificationReset::LINK_TIMEOUT
	redirect "/recover?err=#{CGI::escape("Link Expired.")}"
end

# load objects
user = BlackStack::Core::User.where(:id=>notification.id_user).first

# verifico que el usuario exista
if user.nil?
	redirect "/recover?err=#{CGI::escape("User Not Found.")}"
end

# validate: new_password_1 is required
if new_password_1.to_s.size==0
	redirect "/reset/#{nid}?err=#{CGI::escape("New Password is Required.")}"
end

# validate: new_password_2 is required
if new_password_2.to_s.size==0
	redirect "/reset/#{nid}?err=#{CGI::escape("Repeat Password is Required.")}"
end

# validar que la nueva password cumple con los requisitos de seguridad
if !new_password_1.password?
	redirect "/reset/#{nid}?err=#{CGI::escape("Password is Not Secure. Password must have letters and number, and 6 chars as minimum.")}"
end

# validar que las passwords coincidan
if new_password_1 != new_password_2
	redirect "/reset/#{nid}?err=#{CGI::escape("Passwords do not match.")}"
end

# update password
user.password = BCrypt::Password.create(new_password_1) # reference: https://github.com/bcrypt-ruby/bcrypt-ruby#how-to-use-bcrypt-ruby-in-general
user.save

# redirecciono a la pagina de login
redirect "/login?msg=#{CGI::escape("Password Changed Successfully.")}"
%>